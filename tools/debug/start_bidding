#!/usr/bin/env bash
# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

print_usage() {
    cat << USAGE
Usage:
  <options>
  --enable_inference           Enable bidding with inference capabilities
  --gdb                        Run with GDB
  -h, --help                   Print usage information
USAGE
    exit 0
}

declare -i ENABLE_INFERENCE=0
declare -i USE_GDB=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --enable_inference)
      ENABLE_INFERENCE=1
      shift
      ;;
    --gdb)
      USE_GDB=1
      shift
      ;;
    -h | --help) print_usage ;;
    *) print_usage ;;
  esac
done

export PROJECT_ROOT=$(git rev-parse --show-toplevel)
function get_libcddl_path() {
  declare -a candidates=(
    "bazel-out/k8-opt/bin/external/cddl_lib/libcddl.so"
    "bazel-out/k8-dbg/bin/external/cddl_lib/libcddl.so"
    "bazel-out/k8-opt/bin/production/packaging/aws/bidding_service/libcddl.so"
    "bazel-out/k8-opt/bin/production/packaging/gcp/bidding_service/libcddl.so"
    "bazel-out/k8-opt/dbg/production/packaging/aws/bidding_service/libcddl.so"
    "bazel-out/k8-opt/dbg/production/packaging/gcp/bidding_service/libcddl.so"
  )
  for f in "${candidates[@]}"
  do
    if [[ -f ${PROJECT_ROOT}/$f ]]; then
      echo ${PROJECT_ROOT}/$f
      break
    fi
  done
}

cddl_path=$(get_libcddl_path)
echo "Using libcddl path: ${cddl_path}"

source $(dirname "$0")/common
declare -a -r DOCKER_RUN_ARGS=(
  "--volume=${cddl_path}:/usr/lib/libcddl.so"
  "--volume=${PROJECT_ROOT}/bazel-bin/services/bidding_service/server:/server"
  "--volume=${PROJECT_ROOT}/services/bidding_service/egress_cddl_spec:/egress_cddl_spec"
  "--volume=${PROJECT_ROOT}/services/inference_sidecar/modules/pytorch_v2_1_1/artifacts/inference_sidecar_pytorch_v2_1_1:/inference_sidecar_pytorch_v2_1_1"
  "--volume=${PROJECT_ROOT}/services/inference_sidecar/common/testdata/models/pytorch_generate_bid_model.pt:/generate_bid_model"
  "--name=bidding"
)
export EXTRA_DOCKER_RUN_ARGS="${COMMON_DOCKER_RUN_ARGS[@]} ${DOCKER_RUN_ARGS[@]}"

echo $EXTRA_DOCKER_RUN_ARGS

export INFERENCE_BIDDING_JS_PATH="/src/workspace/services/inference_sidecar/common/tools/debug/generateBidRunInference.js"

export BUYER_CODE_FETCH_CONFIG=$(cat << END
{
  "fetchMode": 0,
  "biddingJsPath": "",
  "biddingJsUrl": "${BIDDING_JS_URL}",
  "protectedAppSignalsBiddingJsUrl": "${BIDDING_JS_URL}",
  "biddingWasmHelperUrl": "",
  "protectedAppSignalsBiddingWasmHelperUrl": "",
  "urlFetchPeriodMs": 13000000,
  "urlFetchTimeoutMs": 30000,
  "enableBuyerDebugUrlGeneration": true,
  "prepareDataForAdsRetrievalJsUrl": "",
  "prepareDataForAdsRetrievalWasmHelperUrl": "",
  "enablePrivateAggregateReporting": false
}
END
)

export INFERENCE_ARGS=""

if [[ ${ENABLE_INFERENCE} -eq 1 ]]; then
  INFERENCE_ARGS=$(cat << END
--inference_sidecar_binary_path="/inference_sidecar_pytorch_v2_1_1" \
--inference_sidecar_runtime_config='{
  "num_interop_threads": 4,
  "num_intraop_threads": 4,
  "module_name": "pytorch_v2_1_1"
}' \
--inference_model_local_paths="/generate_bid_model"
END
)
  BUYER_CODE_FETCH_CONFIG=$(cat << END
{
  "fetchMode": 2,
  "biddingJsPath": "${INFERENCE_BIDDING_JS_PATH}",
  "urlFetchPeriodMs": 13000000,
  "urlFetchTimeoutMs": 30000,
  "enableBuyerDebugUrlGeneration": true
}
END
)
fi

export SERVER_START_CMD=$(cat << END
/server \
--enable_bidding_service_benchmark="true" \
--init_config_client="false" --port=50057 \
--js_num_workers=4 \
--js_worker_queue_len=100 \
--test_mode="true" \
--telemetry_config="mode: EXPERIMENT" \
--roma_timeout_ms="120000" \
--egress_schema_fetch_config='{
      "fetchMode": 0,
      "egressSchemaPath": "",
      "egressSchemaUrl": "${EGRESS_SCHEMA_URL}",
      "urlFetchPeriodMs": 13000000,
      "urlFetchTimeoutMs": 30000,
    }' \
--buyer_code_fetch_config='${BUYER_CODE_FETCH_CONFIG}' \
--enable_protected_app_signals="true" \
--enable_otel_based_logging="true" \
--consented_debug_token="test_token" \
--enable_protected_audience="true" \
--tee_ad_retrieval_kv_server_addr="localhost:50057" \
--ps_verbosity=2 \
--bidding_tcmalloc_background_release_rate_bytes_per_second=4096 \
--bidding_tcmalloc_max_total_thread_cache_bytes=10737418240 \
--ad_retrieval_timeout_ms="60000" \
${INFERENCE_ARGS} && exit
END
)

if [[ ${USE_GDB} -eq 1 ]]; then
  ${PROJECT_ROOT}/builders/tools/cbuild --seccomp-unconfined \
  --docker-network host --image build-debian \
  --cmd "apt-get update && apt-get -y install gdb && gdb -ex=r --args ${SERVER_START_CMD}"
else
  ${PROJECT_ROOT}/builders/tools/cbuild --seccomp-unconfined  --docker-network host --image build-debian --cmd  "${SERVER_START_CMD}"
fi
