#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

export PROJECT_ROOT=$(git rev-parse --show-toplevel)

source $(dirname "$0")/common
declare -a -r DOCKER_RUN_ARGS=(
  "--volume=${PROJECT_ROOT}/bazel-bin/services/bidding_service/server:/server"
  "--name=bidding"
)
export EXTRA_DOCKER_RUN_ARGS="${COMMON_DOCKER_RUN_ARGS[@]} ${DOCKER_RUN_ARGS[@]}"

echo $EXTRA_DOCKER_RUN_ARGS

export SERVER_START_CMD=$(cat << END
/server \
--enable_bidding_service_benchmark="true" \
--init_config_client="false" --port=50057 \
--js_num_workers=4 \
--js_worker_queue_len=100 \
--test_mode="true" \
--telemetry_config="mode: EXPERIMENT" \
--roma_timeout_ms="120000" \
--buyer_code_fetch_config='{
      "fetchMode": 0,
      "biddingJsPath": "",
      "biddingJsUrl": "https://td.doubleclick.net/td/bjs",
      "protectedAppSignalsBiddingJsUrl": "https://td.doubleclick.net/td/bjs",
      "biddingWasmHelperUrl": "",
      "protectedAppSignalsBiddingWasmHelperUrl": "",
      "urlFetchPeriodMs": 13000000,
      "urlFetchTimeoutMs": 30000,
      "enableBuyerDebugUrlGeneration": true,
      "enableAdtechCodeLogging": false,
      "prepareDataForAdsRetrievalJsUrl": "",
      "prepareDataForAdsRetrievalWasmHelperUrl": ""
    }' \
--enable_otel_based_logging="false" \
--consented_debug_token="" \
--enable_protected_app_signals="false" \
--enable_protected_audience="true" \
--tee_ad_retrieval_kv_server_addr="localhost:50057" \
--ps_verbosity=2 \
--ad_retrieval_timeout_ms="60000" && exit
END
)

if [[ $1 == "--gdb" ]]; then
  ${PROJECT_ROOT}/builders/tools/cbuild --seccomp-unconfined \
  --docker-network host --image build-debian \
  --cmd "apt-get update && apt-get -y install gdb && gdb -ex=r --args ${SERVER_START_CMD}"
else
  ${PROJECT_ROOT}/builders/tools/cbuild --seccomp-unconfined  --docker-network host --image build-debian --cmd  "${SERVER_START_CMD}"
fi
